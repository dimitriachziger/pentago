package logic;

import java.math.BigInteger;
import java.util.HashSet;
import java.util.Set;

/**
 * Beinhaltet BitMasken fuer 32 Moegliche Gewinnreihen. Ueberprueft ein
 * Spielfeld in BigInteger-Darstellung nach einem Gewinn.
 *
 * @author Dimitri Solodownik, inf102736
 */
public class WinValidator {

    /* 32 moegliche Gewinnreihen fuer den Computerspieler
        fuer Spieler leftShift(1)
     */
    private static final BigInteger[] WINMASKS = new BigInteger[]{
        new BigInteger("010000000000010000000000010000000000010000000000010000000000000000000000", 2),
        new BigInteger("000000000000010000000000010000000000010000000000010000000000010000000000", 2),
        new BigInteger("000100000000000100000000000100000000000100000000000100000000000000000000", 2),
        new BigInteger("000000000000000100000000000100000000000100000000000100000000000100000000", 2),
        new BigInteger("000001000000000001000000000001000000000001000000000001000000000000000000", 2),
        new BigInteger("000000000000000001000000000001000000000001000000000001000000000001000000", 2),
        new BigInteger("000000000000000000010000000000010000000000010000000000010000000000010000", 2),
        new BigInteger("000000010000000000010000000000010000000000010000000000010000000000000000", 2),
        new BigInteger("000000000000000000000100000000000100000000000100000000000100000000000100", 2),
        new BigInteger("000000000100000000000100000000000100000000000100000000000100000000000000", 2),
        new BigInteger("000000000000000000000001000000000001000000000001000000000001000000000001", 2),
        new BigInteger("000000000001000000000001000000000001000000000001000000000001000000000000", 2),
        new BigInteger("000101010101000000000000000000000000000000000000000000000000000000000000", 2),
        new BigInteger("010101010100000000000000000000000000000000000000000000000000000000000000", 2),
        new BigInteger("000000000000000101010101000000000000000000000000000000000000000000000000", 2),
        new BigInteger("000000000000010101010100000000000000000000000000000000000000000000000000", 2),
        new BigInteger("000000000000000000000000000101010101000000000000000000000000000000000000", 2),
        new BigInteger("000000000000000000000000010101010100000000000000000000000000000000000000", 2),
        new BigInteger("000000000000000000000000000000000000000101010101000000000000000000000000", 2),
        new BigInteger("000000000000000000000000000000000000010101010100000000000000000000000000", 2),
        new BigInteger("000000000000000000000000000000000000000000000000000101010101000000000000", 2),
        new BigInteger("000000000000000000000000000000000000000000000000010101010100000000000000", 2),
        new BigInteger("000000000000000000000000000000000000000000000000000000000000000101010101", 2),
        new BigInteger("000000000000000000000000000000000000000000000000000000000000010101010100", 2),
        new BigInteger("000000000000000100000000000001000000000000010000000000000100000000000001", 2),
        new BigInteger("010000000000000100000000000001000000000000010000000000000100000000000000", 2),
        new BigInteger("000100000000000001000000000000010000000000000100000000000001000000000000", 2),
        new BigInteger("000000000000010000000000000100000000000001000000000000010000000000000100", 2),
        new BigInteger("000000000000000000000100000000010000000001000000000100000000010000000000", 2),
        new BigInteger("000000000001000000000100000000010000000001000000000100000000000000000000", 2),
        new BigInteger("000000000100000000010000000001000000000100000000010000000000000000000000", 2),
        new BigInteger("000000000000000000000001000000000100000000010000000001000000000100000000", 2)

    };

    /**
     * Prueft durch Bit-Operationen mit BitMasken, ob eine Gewinnreihe besteht.
     *
     * @param checkVal pruefendes Feld in BigInteger-Darstellung
     * @param player pruefender Spieler
     * @return Menge der Gewinnreihen als BigInteger-Werte. null wenn keine
     * Gewinnreihe vorhanden
     */
    public static Set<BigInteger> getSetOfWinBits(BigInteger checkVal, Player player) {
        Set<BigInteger> result = new HashSet<>();
        for (BigInteger bi : WINMASKS) {
            if (player == Player.HUMANPLAYER) {
                bi = bi.shiftLeft(1);
            }
            if (bi.and(checkVal).bitCount() > 4) {
                result.add(bi);
            }
        }
        if (result.size() > 0) {
            return result;
        }
        return null;
    }

}
